name: build

on:
  workflow_dispatch:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-[0-9]+'
    branches:
      - 'customized'

env:
  CARGO_TERM_COLOR: always
  LATEST_TAG: latest
  
jobs:

  # binary build
  build:

    name: Build - ${{ matrix.job.name }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        job:
          - { name: "amd64",   target: "x86_64-unknown-linux-musl" }
          - { name: "arm64v8", target: "aarch64-unknown-linux-musl" }
          #- { name: "armv7",   target: "armv7-unknown-linux-musleabihf" }
          #- { name: "i386",    target: "i686-unknown-linux-musl" }
          #- { name: "amd64fb",    target: "x86_64-unknown-freebsd" }

    steps:
      
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: "1.70.0"
          override: true
          default: true
          components: rustfmt
          profile: minimal
          target: ${{ matrix.job.target }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features --target=${{ matrix.job.target }}
          use-cross: true  

      - name: Exec chmod
        run: chmod -v a+x target/${{ matrix.job.target }}/release/*

      - name: Publish Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-linux-${{ matrix.job.name }}
          path: |
            target/${{ matrix.job.target }}/release/cscpassist-intermediary
            target/${{ matrix.job.target }}/release/cscpassist-controller
            target/${{ matrix.job.target }}/release/cscpassist-utils
          if-no-files-found: error

  build-win:
    name: Build - windows
    runs-on: windows-2019

    steps:
      
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: "1.70.0"
          override: true
          default: true
          components: rustfmt
          profile: minimal
          target: x86_64-pc-windows-msvc

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features --target=x86_64-pc-windows-msvc
          use-cross: true

      - name: Install NSIS
        run: |
          iwr -useb get.scoop.sh -outfile 'install.ps1'
          .\install.ps1 -RunAsAdmin
          scoop update
          scoop bucket add extras
          scoop install nsis

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Sign exe files
        uses: GermanBluefox/code-sign-action@v7
        if: false
        with:
          certificate: '${{ secrets.WINDOWS_PFX_BASE64 }}'
          password: '${{ secrets.WINDOWS_PFX_PASSWORD }}'
          certificatesha1: '${{ secrets.WINDOWS_PFX_SHA1_THUMBPRINT }}'
          folder: 'target\x86_64-pc-windows-msvc\release'
          recursive: false

      - name: Build UI browser file
        run: |
          npm i
          npm run build
        working-directory: ./ui/html

      - name: Build UI setup file
        run: |
          rustup default nightly
          cargo build --release
          xcopy /y ..\target\x86_64-pc-windows-msvc\release\*.exe setup\bin\
          xcopy /y target\release\*.exe setup\
          mkdir setup\logs
          makensis /V1 setup.nsi
          mkdir SignOutput
          mv CscpAssistServer.Setup.exe SignOutput\
          mv ..\target\x86_64-pc-windows-msvc\release\*.exe SignOutput\
        working-directory: ./ui

      - name: Sign UI setup file 
        uses: GermanBluefox/code-sign-action@v7
        if: false
        with:
          certificate: '${{ secrets.WINDOWS_PFX_BASE64 }}'
          password: '${{ secrets.WINDOWS_PFX_PASSWORD }}'
          certificatesha1: '${{ secrets.WINDOWS_PFX_SHA1_THUMBPRINT }}'
          folder: './ui/SignOutput'
          recursive: false

      - name: Publish Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-windows-x86_64
          path: |
            ui\SignOutput\cscpassist-intermediary.exe
            ui\SignOutput\cscpassist-controller.exe
            ui\SignOutput\cscpassist-utils.exe
            ui\SignOutput\CscpAssistServer.Setup.exe
          if-no-files-found: error

  # github (draft) release with all binaries
  release:

    name: Github release
    needs: 
      - build
      - build-win
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: "linux", name: "amd64", suffix: "" }
          - { os: "linux", name: "arm64v8", suffix: "" }
          #- { os: "linux", name: "armv7", suffix: "" }
          #- { os: "linux", name: "i386", suffix: "" }
          #- { os: "linux", name: "amd64fb", suffix: "" }
          - { os: "windows", name: "x86_64", suffix: "-unsigned" }
          
    steps:

      - name: Download binaries (${{ matrix.job.os }} - ${{ matrix.job.name }})
        uses: actions/download-artifact@v3
        with:
          name: binaries-${{ matrix.job.os }}-${{ matrix.job.name }}
          path: ${{ matrix.job.name }}

      - name: Exec chmod
        run: chmod -v a+x ${{ matrix.job.name }}/*

      - name: Pack files (${{ matrix.job.os }} - ${{ matrix.job.name }})
        run: |
          sudo apt update
          DEBIAN_FRONTEND=noninteractive sudo apt install -y zip
          zip ${{ matrix.job.name }}/rustdesk-server-${{ matrix.job.os }}-${{ matrix.job.name }}${{ matrix.job.suffix }}.zip ${{ matrix.job.name }}/*

      - name: Create Release (${{ matrix.job.os }} - (${{ matrix.job.name }})
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: ${{ matrix.job.name }}/rustdesk-server-${{ matrix.job.os }}-${{ matrix.job.name }}${{ matrix.job.suffix }}.zip